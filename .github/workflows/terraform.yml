name: Terraform CI/CD

on:
  push:
    branches:
      - main # Trigger on push to main branch
    paths:
      - 'infra/**' # Only trigger if changes are in the 'infra' directory
  pull_request:
    branches:
      - main # Trigger on PRs to main branch
    paths:
      - 'infra/**' # Only trigger if changes are in the 'infra' directory

  workflow_dispatch: # Allows manual trigger of the workflow
    inputs:
      terraform_action:
        description: 'Terraform Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - 'plan'
          - 'apply'
          - 'destroy'

permissions:
  id-token: write # This is essential for OIDC authentication with AWS
  contents: read  # Allows checkout of repository code

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_aws_region: us-west-2
      TF_WORKING_DIR: infra/ # Define the root directory of your Terraform code
      bucket_name: marcelo-devops-challenge
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/devops-challenge-role
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.bucket_name }}" -backend-config="key=${{ env.TF_WORKING_DIR }}terraform.tfstate" -backend-config="region=${{ env.TF_VAR_aws_region }}" -reconfigure
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Fail pipeline if terraform files are not formatted
      - name: Terraform fmt check
        id: fmtcheck
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        # Plan on every push and pull request
        run: terraform plan -no-color -out=tfplan.out
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        id: apply
        # Only run apply on push to the main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan.out
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Destroy
        id: destroy
        # Only run destroy when 'destroy' is explicitly chosen via workflow_dispatch
        if: github.event.inputs.terraform_action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}
